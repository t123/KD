@inherits FluxorComponent

<MudDrawer @bind-Open="PropertyState.Value.IsOpen" Anchor="Anchor.Right" Width="@PropertyState.Value.Width" Variant="DrawerVariant.Persistent" OverlayAutoClose="false" Class="@PropertyState.Value.Class">
    <MudElement>
        <span>@PropertyState.Value.Width</span>
        <MudButton OnClick="CloseWindow">Close</MudButton>
        <MudButton OnClick="ToggleWindow">Toggle</MudButton>
        <MudElement>@PropertyState.Value.LastUpdate</MudElement>
        <MudElement>@PropertyState.Value.ViewModel?.Name</MudElement>
        <MudElement>@PropertyState.Value.ViewModel?.PropertyViewType</MudElement>
    </MudElement>
    <DynamicComponent @ref="dc" Type="SelectedType" Parameters="@Parameters" />
</MudDrawer>

@code {
    private DynamicComponent? dc;

    [Inject]
    private IState<PropertyViewState> PropertyState { get; set; }

    [Inject]
    public IDispatcher Dispatcher { get; set; }

    Type? SelectedType
    {
        get
        {
            if (components.TryGetValue(PropertyState.Value.ViewModel?.PropertyViewType ?? "", out var type))
            {
                return type;
            }

            return typeof(EmptyProperty);
        }
    }

    readonly Dictionary<string, Type> components = new()
    {
        [ObjectType.Pod] = typeof(KD.UI.Components.Pages.Pods.PodProperty),
        [ObjectType.Deployment] = typeof(KD.UI.Components.Pages.Deployments.DeploymentProperty),
        [ObjectType.Namespace] = typeof(KD.UI.Components.Pages.Namespaces.NamespaceProperty),
        [ObjectType.Ingress] = typeof(KD.UI.Components.Pages.Ingresses.IngressProperty),
        [ObjectType.Service] = typeof(KD.UI.Components.Pages.Services.ServiceProperty),
        [ObjectType.Endpoint] = typeof(KD.UI.Components.Pages.Endpoints.EndpointProperty),
        [ObjectType.DaemonSet] = typeof(KD.UI.Components.Pages.DaemonSets.DaemonSetsProperty),
    };

    Dictionary<string, object?> Parameters
    {
        get
        {
            var d = new Dictionary<string, object?>();
            d.Add("State", PropertyState.Value);
            d.Add("ViewModel", PropertyState.Value.ViewModel);
            return d;
        }
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
    }

    private void CloseWindow(MouseEventArgs e)
    {
        Dispatcher.Dispatch(new ClosePropertiesAction());
    }

    private void ToggleWindow(MouseEventArgs e)
    {
        Dispatcher.Dispatch(new TogglePropertiesAction(PropertyState.Value.Width));
    }
}
