@inherits FluxorComponent

<MudOverlay Visible="@(SearchState.Value.IsOpen || EditorViewState.Value.IsOpen)" AutoClose="true" OnClosed="CloseSearch" DarkBackground="true"/>
<MudPopover Open="@SearchState.Value.IsOpen" Fixed="true" AnchorOrigin="Origin.TopCenter" TransformOrigin="Origin.TopLeft" Elevation="10" Square="true" RelativeWidth="DropdownWidth.Relative">
    <MudStack>
        <MudElement>
            <MudTextField Value="@TextValue" ShrinkLabel="true" Label="Search for..." Variant="Variant.Outlined" Margin="Margin.Dense" Immediate="true" OnKeyUp="KeyUp" ValueChanged="@((e) => TextChanged(e))" T="string" AutoFocus="true"></MudTextField>
        </MudElement>
        @if (SearchState.Value.Status == Infrastructure.Fluxor.SearchState.SearchStatus.Searching)
        {
            <MudProgressCircular Indeterminate="true" />
        }
        else if (SearchState.Value.Status == Infrastructure.Fluxor.SearchState.SearchStatus.Results)
        {
            var results = SearchState.Value.Results ?? [];
            <MudTabs Outlined="true" Position="Position.Left">
                <MudTabPanel Text="@($"All ({results.Length})")">
                    <MudStack Row="false" Style="width: 100%">
                        @foreach (var r in results.OrderByDescending(x => x.Score).Take(15))
                        {
                            <SearchResult Result="r" />
                        }
                    </MudStack>
                </MudTabPanel>
                @foreach (var grouping in results.OrderBy(x => x.NodeTypeAlias).GroupBy(x => x.NodeTypeAlias))
                {
                    <MudTabPanel Text="@($"{grouping.Key} ({grouping.Count()})")">
                        <MudStack Row="false" Style="width: 100%">
                            @foreach (var r in grouping.OrderBy(x => x.Score).Take(15))
                            {
                                <SearchResult Result="r" />
                            }
                        </MudStack>
                    </MudTabPanel>
                }
            </MudTabs>
        }
        else if (SearchState.Value.Status == Infrastructure.Fluxor.SearchState.SearchStatus.Failure)
        {
            <MudText>Oops</MudText>
        }
    </MudStack>
</MudPopover>

@code {
    [Inject]
    private IState<SearchState> SearchState { get; set; }

    [Inject]
    private IState<EditorViewState> EditorViewState { get; set; }

    [Inject]
    public IDispatcher Dispatcher { get; set; }

    private string? TextValue { get; set; }

    protected override void OnInitialized()
    {
        base.OnInitialized();
    }

    private void TextChanged(string s)
    {
        Dispatcher.Dispatch(new SearchAction(s));
    }

    private void CloseSearch()
    {
        if (SearchState.Value.IsOpen)
        {
            Dispatcher.Dispatch(new CloseSearchAction());
        }

        if(EditorViewState.Value.IsOpen)
        {
            Dispatcher.Dispatch(new CloseEditorAction());
        }
    }

    private void KeyUp(KeyboardEventArgs args)
    {
        if(args.Code == "Escape")
        {
            Dispatcher.Dispatch(new CloseSearchAction());
        }
    }
}