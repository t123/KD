@using KD.Infrastructure.ViewModels.Objects
@implements IAsyncDisposable
@inherits FluxorComponent

@if (!PersistentVolumeState.Value.IsLoading)
{
    if (PersistentVolumeState.Value.TabMapping.ContainsKey(Tab))
    {
        var itemsView = PersistentVolumeState.Value.TabMapping[Tab];
        <GenericViewHeader Label="Persistent Volume" LastUpdate="@itemsView.LastUpdate">
        </GenericViewHeader>
        <MudDataGrid Items="@(itemsView.Items)" Filterable="true" SortMode="@SortMode.Single" Groupable="false" T="PersistentVolumeViewModel" Dense="true">
            <Columns>
                <TemplateColumn Title="Name">
                    <CellTemplate>
                        <a onclick="@(() => NameClick(context.Item))">@context.Item.Name</a>
                    </CellTemplate>
                </TemplateColumn>
                <PropertyColumn Property="p => p.Created" />
                <PropertyColumn Property="p => p.StorageClassName" />
            </Columns>
        </MudDataGrid>
    }
}
else
{
    <MudProgressCircular Indeterminate="true" />
}

@code {
    private bool IsDisposed;
    private CancellationTokenSource CancellationTokenSource { get; set; } = new();

    [Inject]
    public IState<PersistentVolumeViewState> PersistentVolumeState { get; set; }

    [Parameter]
    public required Tab Tab { get; set; }

    [Inject]
    public IDispatcher Dispatcher { get; set; }

    private void NameClick(PersistentVolumeViewModel viewModel)
    {
        Dispatcher.Dispatch(new OpenPropertiesAction(viewModel, ObjectType.PersistentVolume, Tab, CancellationTokenSource.Token));
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        Dispatcher.Dispatch(new FetchKubernetesPersistentVolumeAction(Tab, CancellationTokenSource.Token));
    }

    protected override ValueTask DisposeAsyncCore(bool disposing)
    {
        if (!IsDisposed)
        {
            IsDisposed = true;

            if (disposing)
            {
                CancellationTokenSource.Cancel();
            }
        }

        return base.DisposeAsyncCore(disposing);
    }
}