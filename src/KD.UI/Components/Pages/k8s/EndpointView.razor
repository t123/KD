@inherits BaseView

<MudElement HtmlTag="div">
    @if (!State.Value.IsLoading)
    {
        if (State.Value.TabMapping.ContainsKey(Tab))
        {
            var view = State.Value.TabMapping[Tab];
            var items = view.Items.AsQueryable();

            if (!string.IsNullOrWhiteSpace(SearchText))
            {
                items = items.Where(x => x.Name.Contains(SearchText, StringComparison.InvariantCultureIgnoreCase));
            }

            <GridHeader Label="Endpoints" View="view" OnRefresh="Fetch" OnSearch="PerformSearch" ItemCount="@items.Count()">
            </GridHeader>
            <MudDataGrid Items="items" T="EndpointViewModel" SortMode="SortMode.Single" RowContextMenuClick="ContextMenuClick" Hover="true">
                <Columns>
                    <TemplateColumn Title="Name" SortBy="x => x.Name" Sortable="true">
                        <CellTemplate>
                            <button @onclick="@(() => OpenProperties(context.Item))">
                                @context.Item.Name
                            </button>
                        </CellTemplate>
                    </TemplateColumn>
                    <PropertyColumn Property="x => x.Namespace"></PropertyColumn>
                    <TemplateColumn Title="Endpoints">
                        <CellTemplate>
                            <ol>
                                @foreach(var ep in context.Item.Ready)
                                {
                                    <li>
                                        <MudText Color="Color.Success">
                                            @ep.Ip
                                        </MudText>
                                    </li>
                                }
                                @foreach (var ep in context.Item.NotReady)
                                {
                                    <li>
                                        <MudText Color="Color.Warning">
                                            @ep.Ip
                                        </MudText>
                                    </li>
                                }
                            </ol>
                        </CellTemplate>
                    </TemplateColumn>
                    <TemplateColumn Title="Ports">
                        <CellTemplate>
                            <ol>
                                @foreach (var p in context.Item.Ports)
                                {
                                    <li>
                                        <MudText Color="Color.Success">
                                            @p.Port @p.Protocol
                                        </MudText>
                                    </li>
                                }
                            </ol>
                        </CellTemplate>
                    </TemplateColumn>
                </Columns>
            </MudDataGrid>
            <MudMenu @ref="_contextMenu" PositionAtCursor="true">
                @if (_contextRow != null)
                {
                    <MudMenuItem Icon="@Icons.Material.Outlined.ContentCopy" OnClick="(e) => CopyToClipboard(_contextRow.Name)">Copy @_contextRow.Name</MudMenuItem>
                    <MudMenuItem Icon="@Icons.Material.Outlined.ContentCopy" OnClick="(e) => CopyToClipboard(_contextRow.Namespace)">Copy @_contextRow.Namespace</MudMenuItem>
                    <MudMenuItem Icon="@Icons.Material.Outlined.Edit" OnClick="(e) => OpenEditor(Tab, _contextRow.Name, _contextRow.Namespace)">Edit @_contextRow.Name</MudMenuItem>
                    <MudMenuItem Icon="@Icons.Material.Filled.DeleteForever" IconColor="Color.Error">Delete @_contextRow.Name</MudMenuItem>
                }
            </MudMenu>
        }
    }
</MudElement>