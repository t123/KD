@inherits BaseView

<MudElement HtmlTag="div">
    @if (!State.Value.IsLoading)
    {
        if (State.Value.TabMapping.ContainsKey(Tab))
        {
            var view = State.Value.TabMapping[Tab];
            var items = view.Items.AsQueryable();

            if (!string.IsNullOrWhiteSpace(SearchText))
            {
                items = items.Where(x => x.Name.Contains(SearchText, StringComparison.InvariantCultureIgnoreCase));
            }

            <GridHeader Label="Nodes" View="view" OnRefresh="Fetch" OnSearch="PerformSearch" ItemCount="@items.Count()">
            </GridHeader>
            <MudDataGrid Items="items" T="NodeViewModel" SortMode="SortMode.Single" RowContextMenuClick="ContextMenuClick" Hover="true">
                <Columns>
                    <TemplateColumn Title="Name" SortBy="x => x.Name" Sortable="true">
                        <CellTemplate>
                            <button @onclick="@(() => OpenProperties(context.Item))">
                                @context.Item.Name
                            </button>
                        </CellTemplate>
                    </TemplateColumn>
                    <PropertyColumn Property="x => x.Created"></PropertyColumn>
                </Columns>
            </MudDataGrid>
            <MudMenu @ref="_contextMenu" PositionAtCursor="true">
                @if (_contextRow != null)
                {
                    <MudMenuItem Icon="@Icons.Material.Outlined.ContentCopy" OnClick="(e) => CopyToClipboard(_contextRow.Name)">Copy @_contextRow.Name</MudMenuItem>
                    <MudMenuItem Icon="@Icons.Material.Outlined.Edit">Edit @_contextRow.Name</MudMenuItem>
                    <MudMenuItem Icon="@Icons.Material.Filled.DeleteForever" IconColor="Color.Error">Delete @_contextRow.Name</MudMenuItem>
                }
            </MudMenu>
        }
    }
</MudElement>