@using KD.Infrastructure.ViewModels.Objects
@implements IAsyncDisposable
@inherits FluxorComponent

@if (!EndpointState.Value.IsLoading)
{
    if (EndpointState.Value.TabMapping.ContainsKey(Tab))
    {
        var namespaceView = EndpointState.Value.TabMapping[Tab];
        <MudElement>
            @(namespaceView.LastUpdate?.ToLongTimeString() ?? "No update")
        </MudElement>
        <MudDataGrid Items="@(namespaceView.Items)" Filterable="true" SortMode="@SortMode.Single" Groupable="false" T="EndpointViewModel" Dense="true" RowContextMenuClick="ContextMenuClick" RowClick="RowClick">
            <Columns>
                <PropertyColumn Property="p => p.Name" />
                <PropertyColumn Property="p => p.Namespace" />
                <PropertyColumn Property="p => p.Created" />
            </Columns>
        </MudDataGrid>
        <MudMenu @ref="_contextMenu" PositionAtCursor="true">
            <MudMenuItem>Test 1</MudMenuItem>
            <MudMenuItem>Test 2</MudMenuItem>
            <MudMenuItem>Test 3</MudMenuItem>
            <MudMenuItem>Test 4</MudMenuItem>
        </MudMenu>
    }
}
else
{
    <MudProgressCircular Indeterminate="true"/>
}

@code {
    private bool IsDisposed;
    private CancellationTokenSource CancellationTokenSource { get; set; } = new();
    private MudMenu _contextMenu;

    [Inject]
    public IState<EndpointViewState> EndpointState { get; set; }

    [Parameter]
    public required Tab Tab { get; set; }

    [Inject]
    public IDispatcher Dispatcher { get; set; }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        Dispatcher.Dispatch(new FetchKubernetesEndpointAction(Tab, CancellationTokenSource.Token));
    }

    private async Task ContextMenuClick(DataGridRowClickEventArgs<EndpointViewModel> e)
    {
        await _contextMenu.OpenMenuAsync(e.MouseEventArgs);
    }

    private async Task RowClick(DataGridRowClickEventArgs<EndpointViewModel> row)
    {
        Dispatcher.Dispatch(new OpenPropertiesAction(row.Item, ObjectType.Endpoint, Tab, CancellationTokenSource.Token));
    }

    protected override ValueTask DisposeAsyncCore(bool disposing)
    {
        if (!IsDisposed)
        {
            IsDisposed = true;

            if (disposing)
            {
                CancellationTokenSource.Cancel();
            }
        }

        return base.DisposeAsyncCore(disposing);
    }
}