@using KD.Infrastructure.ViewModels.Objects
@implements IAsyncDisposable
@inherits FluxorComponent

@if (!IngressState.Value.IsLoading)
{
    if (IngressState.Value.TabMapping.ContainsKey(Tab))
    {
        var itemsView = IngressState.Value.TabMapping[Tab];
        <MudElement>
            @(itemsView.LastUpdate?.ToLongTimeString() ?? "No update")
        </MudElement>
        <MudDataGrid Items="@(itemsView.Items)" Filterable="true" SortMode="@SortMode.Single" Groupable="false" T="IngressViewModel" Dense="true" RowClick="RowClick" RowContextMenuClick="ContextMenuClick">
            <Columns>
                <PropertyColumn Property="p => p.Name" />
                <TemplateColumn Title="Endpoints">
                    <CellTemplate>
                        @foreach (var rule in context.Item.Rules)
                        {
                            var url = "https://" + rule;
                            <MudLink Href="@url" Target="_blank">@rule</MudLink>
                        }
                    </CellTemplate>
                </TemplateColumn>
                <TemplateColumn Title="Load Balancers">
                    <CellTemplate>
                        @foreach (var lb in context.Item.LoadBalancers)
                        {
                            <div>@lb</div>
                        }
                    </CellTemplate>
                </TemplateColumn>
            </Columns>
        </MudDataGrid>
        <MudMenu @ref="_contextMenu" PositionAtCursor="true">
            <MudMenuItem Icon="@Icons.Material.Outlined.Edit">Edit @ContextRow.Name</MudMenuItem>
            <MudMenuItem Icon="@Icons.Material.Filled.DeleteForever" IconColor="Color.Error">Delete @ContextRow.Name</MudMenuItem>
        </MudMenu>
    }
}
else
{
    <MudProgressCircular Indeterminate="true" />
}

@code {
    private bool IsDisposed;
    private CancellationTokenSource CancellationTokenSource { get; set; } = new();
    private MudMenu _contextMenu;
    private IngressViewModel ContextRow;

    [Inject]
    public IState<IngressViewState> IngressState { get; set; }

    [Parameter]
    public required Tab Tab { get; set; }

    [Inject]
    public IDispatcher Dispatcher { get; set; }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        Dispatcher.Dispatch(new FetchKubernetesIngressAction(Tab, CancellationTokenSource.Token));
    }

    private async Task ContextMenuClick(DataGridRowClickEventArgs<IngressViewModel> args)
    {
        ContextRow = args.Item;
        await _contextMenu.OpenMenuAsync(args.MouseEventArgs);
    }

    private async Task RowClick(DataGridRowClickEventArgs<IngressViewModel> row)
    {
        Dispatcher.Dispatch(new OpenPropertiesAction(row.Item, ObjectType.Ingress, Tab, CancellationTokenSource.Token));
    }

    protected override ValueTask DisposeAsyncCore(bool disposing)
    {
        if (!IsDisposed)
        {
            IsDisposed = true;

            if (disposing)
            {
                CancellationTokenSource.Cancel();
            }
        }

        return base.DisposeAsyncCore(disposing);
    }
}