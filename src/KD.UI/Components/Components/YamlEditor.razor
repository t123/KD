@inherits FluxorComponent
@inject IJSRuntime jsRuntime

@using BlazorMonaco
@using BlazorMonaco.Editor
@using BlazorMonaco.Languages

<MudPopover @bind-Open="EditorState.Value.IsOpen" Fixed="true" TransformOrigin="Origin.TopLeft" Elevation="10" Square="true" Class="kd-yaml-editor">
    <MudButton OnClick="CloseEditor">Close</MudButton>
    <MudElement HtmlTag="div" Style="height: 100%;">
        <StandaloneCodeEditor @ref="_standaloneCodeEditor" Id="yaml-editor" ConstructionOptions="EditorConstructionOptions" OnDidInit="OnDidInit" />
    </MudElement>
</MudPopover>

@code {
    private static bool OnDidInitSuccess = false;

    private StandaloneCodeEditor _standaloneCodeEditor;

    [Inject]
    private IState<EditorViewState> EditorState { get; set; }

    [Inject]
    public IDispatcher Dispatcher { get; set; }

    protected override void OnInitialized()
    {
        SubscribeToAction<OpenEditorActionResult>(async (action) =>
        {
            if (_standaloneCodeEditor == null)
            {
                return;
            }

            var yaml = EditorState.Value.Yaml;

            int i = 0;

            System.Diagnostics.Debug.WriteLine("SubscribeToAction: Start");

            while (!OnDidInitSuccess && i < 5)
            {
                System.Diagnostics.Debug.WriteLine("SubscribeToAction: Delaying");

                await Task.Delay(250);
                i++;
            }

            if (!OnDidInitSuccess)
            {
                return;
            }

            System.Diagnostics.Debug.WriteLine("SubscribeToAction: End");

            await _standaloneCodeEditor.SetValue(yaml);
        });

        base.OnInitialized();
    }

    private async Task OnDidInit()
    {
        if (_standaloneCodeEditor != null)
        {
            await BlazorMonaco.Editor.Global.SetTheme(jsRuntime, "vs-dark");
            OnDidInitSuccess = true;
            System.Diagnostics.Debug.WriteLine("OnDidInit: End");
        }
    }

    private StandaloneEditorConstructionOptions EditorConstructionOptions(StandaloneCodeEditor editor)
    {
        return new StandaloneEditorConstructionOptions
        {
            AutomaticLayout = true,
            Language = "yaml",
            Value = " "
        };
    }

    private async Task CloseEditor(MouseEventArgs e)
    {
        OnDidInitSuccess = false;
        Dispatcher.Dispatch(new CloseEditorAction());
    }
}
