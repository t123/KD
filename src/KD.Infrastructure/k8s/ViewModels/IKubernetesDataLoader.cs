using k8s.Models;

namespace KD.Infrastructure.k8s.ViewModels;

internal interface IKubernetesDataLoader
{
    Task<V1ClusterRole?> GetClusterRole(Context context, string ns, string name, CancellationToken cancellationToken);
    Task<V1ClusterRoleBinding?> GetClusterRoleBinding(Context context, string ns, string name, CancellationToken cancellationToken);
    Task<V1ClusterRoleBindingList> GetClusterRoleBindings(Context context, string[] namespaces, CancellationToken cancellationToken);
    Task<V1ClusterRoleList> GetClusterRoles(Context context, string[] namespaces, CancellationToken cancellationToken);
    Task<V1ConfigMap?> GetConfigMap(Context context, string ns, string name, CancellationToken cancellationToken);
    Task<V1ConfigMapList> GetConfigMaps(Context context, string[] namespaces, CancellationToken cancellationToken);
    Task<V1CronJob?> GetCronJob(Context context, string ns, string name, CancellationToken cancellationToken);
    Task<V1CronJobList> GetCronJobs(Context context, string[] namespaces, CancellationToken cancellationToken);
    Task<V1CustomResourceDefinitionList> GetCustomResourceDefinitions(Context context, string[] namespaces, CancellationToken cancellationToken);
    Task<V1CustomResourceDefinition?> GetCustomResourcesDefinition(Context context, string ns, string name, CancellationToken cancellationToken);
    Task<V1DaemonSet?> GetDaemonSet(Context context, string ns, string name, CancellationToken cancellationToken);
    Task<V1DaemonSetList> GetDaemonSets(Context context, string[] namespaces, CancellationToken cancellationToken);
    Task<V1Deployment?> GetDeployment(Context context, string ns, string name, CancellationToken cancellationToken);
    Task<V1DeploymentList> GetDeployments(Context context, string[] namespaces, CancellationToken cancellationToken);
    Task<V1Endpoints?> GetEndpoint(Context context, string ns, string name, CancellationToken cancellationToken);
    Task<V1EndpointsList> GetEndpoints(Context context, string[] namespaces, CancellationToken cancellationToken);
    Task<Eventsv1EventList> GetEvents(Context context, string[] namespaces, CancellationToken cancellationToken);
    Task<V2HorizontalPodAutoscaler?> GetHorizontalPodAutoscaler(Context context, string ns, string name, CancellationToken cancellationToken);
    Task<V2HorizontalPodAutoscalerList> GetHorizontalPodAutoscalers(Context context, string[] namespaces, CancellationToken cancellationToken);
    Task<V1Ingress?> GetIngress(Context context, string ns, string name, CancellationToken cancellationToken);
    Task<V1IngressClass?> GetIngressClass(Context context, string ns, string name, CancellationToken cancellationToken);
    Task<V1IngressClassList> GetIngressClasses(Context context, string[] namespaces, CancellationToken cancellationToken);
    Task<V1IngressList> GetIngresses(Context context, string[] namespaces, CancellationToken cancellationToken);
    Task<V1Job?> GetJob(Context context, string ns, string name, CancellationToken cancellationToken);
    Task<V1JobList> GetJobs(Context context, string[] namespaces, CancellationToken cancellationToken);
    Task<V1Lease?> GetLease(Context context, string ns, string name, CancellationToken cancellationToken);
    Task<V1LeaseList> GetLeases(Context context, string[] namespaces, CancellationToken cancellationToken);
    Task<V1MutatingWebhookConfiguration?> GetMutatingWebhookConfiguration(Context context, string ns, string name, CancellationToken cancellationToken);
    Task<V1MutatingWebhookConfigurationList> GetMutatingWebhookConfigurations(Context context, string[] namespaces, CancellationToken cancellationToken);
    Task<V1Namespace?> GetNamespace(Context context, string @namespace, string name, CancellationToken cancellationToken);
    Task<V1NamespaceList> GetNamespaces(Context context, string[] namespaces, CancellationToken cancellationToken);
    Task<V1NetworkPolicyList> GetNetworkPolicies(Context context, string[] namespaces, CancellationToken cancellationToken);
    Task<V1NetworkPolicy?> GetNetworkPolicy(Context context, string ns, string name, CancellationToken cancellationToken);
    Task<V1Node?> GetNode(Context context, string ns, string name, CancellationToken cancellationToken);
    Task<V1NodeList> GetNodes(Context context, string[] namespaces, CancellationToken cancellationToken);
    Task<V1PersistentVolume?> GetPersistentVolume(Context context, string ns, string name, CancellationToken cancellationToken);
    Task<V1PersistentVolumeClaim?> GetPersistentVolumeClaim(Context context, string ns, string name, CancellationToken cancellationToken);
    Task<V1PersistentVolumeClaimList> GetPersistentVolumeClaims(Context context, string[] namespaces, CancellationToken cancellationToken);
    Task<V1PersistentVolumeList> GetPersistentVolumes(Context context, string[] namespaces, CancellationToken cancellationToken);
    Task<V1Pod?> GetPod(Context context, string ns, string name, CancellationToken cancellationToken);
    Task<V1PodDisruptionBudget?> GetPodDisruptionBudget(Context context, string ns, string name, CancellationToken cancellationToken);
    Task<V1PodDisruptionBudgetList> GetPodDisruptionBudgets(Context context, string[] namespaces, CancellationToken cancellationToken);
    Task<V1PodList> GetPods(Context context, string[] namespaces, CancellationToken cancellationToken);
    Task<V1PriorityClass?> GetPriorityClass(Context context, string ns, string name, CancellationToken cancellationToken);
    Task<V1PriorityClassList> GetPriorityClasses(Context context, string[] namespaces, CancellationToken cancellationToken);
    Task<V1ReplicaSet?> GetReplicaSet(Context context, string ns, string name, CancellationToken cancellationToken);
    Task<V1ReplicaSetList> GetReplicaSets(Context context, string[] namespaces, CancellationToken cancellationToken);
    Task<V1ReplicationController?> GetReplicationController(Context context, string ns, string name, CancellationToken cancellationToken);
    Task<V1ReplicationControllerList> GetReplicationControllers(Context context, string[] namespaces, CancellationToken cancellationToken);
    Task<V1ResourceQuota?> GetResourceQuota(Context context, string ns, string name, CancellationToken cancellationToken);
    Task<V1ResourceQuotaList> GetResourceQuotas(Context context, string[] namespaces, CancellationToken cancellationToken);
    Task<V1Role?> GetRole(Context context, string ns, string name, CancellationToken cancellationToken);
    Task<V1RoleBinding?> GetRoleBinding(Context context, string ns, string name, CancellationToken cancellationToken);
    Task<V1RoleBindingList> GetRoleBindings(Context context, string[] namespaces, CancellationToken cancellationToken);
    Task<V1RoleList> GetRoles(Context context, string[] namespaces, CancellationToken cancellationToken);
    Task<V1RuntimeClass?> GetRuntimeClass(Context context, string ns, string name, CancellationToken cancellationToken);
    Task<V1RuntimeClassList> GetRuntimeClasses(Context context, string[] namespaces, CancellationToken cancellationToken);
    Task<V1Secret?> GetSecret(Context context, string ns, string name, CancellationToken cancellationToken);
    Task<V1SecretList> GetSecrets(Context context, string[] namespaces, CancellationToken cancellationToken);
    Task<V1Service?> GetService(Context context, string ns, string name, CancellationToken cancellationToken);
    Task<V1ServiceAccount?> GetServiceAccount(Context context, string ns, string name, CancellationToken cancellationToken);
    Task<V1ServiceAccountList> GetServiceAccounts(Context context, string[] namespaces, CancellationToken cancellationToken);
    Task<V1ServiceList> GetServices(Context context, string[] namespaces, CancellationToken cancellationToken);
    Task<V1StatefulSet?> GetStatefulSet(Context context, string ns, string name, CancellationToken cancellationToken);
    Task<V1StatefulSetList> GetStatefulSets(Context context, string[] namespaces, CancellationToken cancellationToken);
    Task<V1StorageClass?> GetStorageClass(Context context, string ns, string name, CancellationToken cancellationToken);
    Task<V1StorageClassList> GetStorageClasses(Context context, string[] namespaces, CancellationToken cancellationToken);
    Task<V1ValidatingWebhookConfiguration?> GetValidatingWebhookConfiguration(Context context, string ns, string name, CancellationToken cancellationToken);
    Task<V1ValidatingWebhookConfigurationList> GetValidatingWebhookConfigurations(Context context, string[] namespaces, CancellationToken cancellationToken);
}
